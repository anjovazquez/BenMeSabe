/*
// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()

        mavenCentral()

        maven {
            url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
        }
    }
}*/
apply from: 'buildsystem/ci.gradle'
apply from: 'buildsystem/dependencies.gradle'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.google.gms:google-services:1.4.0-beta3'
    }
}

allprojects {
    ext {
        androidApplicationId = 'com.avv.benmesabe.app'
        androidVersionCode = 2
        androidVersionName = "2.0"
        /*testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
        testApplicationId = 'com.avv.benmesabe.app.test'*/

        /*println("JAVA_HOME: " + System.getenv("JAVA_HOME"))
        println("JAVA7_HOME: " + System.getenv("JAVA7_HOME"))
        println("JAVA8_HOME: " + System.getenv("JAVA8_HOME"))
        println("TEMP: " + System.getenv("TEMP"))*/
    }

    repositories {
        jcenter()

        mavenCentral()

        maven {
            url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
        }

        maven { url "https://jitpack.io" }
    }
}

task wrapper(type: Wrapper) {
    description 'Creates the gradle wrapper.'
    gradleVersion '2.6'
}

/*task runDomainUnitTests(dependsOn: [':domain:test']) {
    description 'Run unit tests for both domain and data layers.'
}

task runDataUnitTests(dependsOn: [':data:cleanTestDebug', ':data:testDebug']) {
    description 'Run unit tests for both domain and data layers.'
}

task runUnitTests(dependsOn: ['runDomainUnitTests', 'runDataUnitTests']) {
    description 'Run unit tests for both domain and data layers.'
}

task runAcceptanceTests(dependsOn: [':presentation:connectedAndroidTest']) {
    description 'Run application acceptance tests.'
}
*/